#include<stdio.h>
#include<stdlib.h>

typedef struct Nodetype
{
    struct Nodetype* next;
    int info;
}Node;

Node* getNode(int n)
{
    Node* ptr=(Node*)malloc(sizeof(Node));
    ptr->info=n;
    ptr->next=NULL;
    return ptr;
}
void addAtHead(Node** head,int n)
{
    Node* ptr=(Node*)malloc(sizeof(Node));
    ptr=getNode(n);
    if(*head==NULL)
        *head=ptr;


    else
    {
        ptr->next=*head;
        *head=ptr;
    }
}

void deleteFromHead(Node** head)
{
    if(*head==NULL)
        printf("\nEmpty list\n");
    else
    {
        Node* p=*head;
        printf("%d ",p->info);
        p=p->next;
        free(*head);
        *head=p;
    }

}

void addAtTail(Node** head,int n)
{
    Node* ptr=(Node*)malloc(sizeof(Node));
    ptr=getNode(n);
    if(*head==NULL)
        *head=ptr;
    else
    {
        Node* p=*head;
        while(p->next)
            p=p->next;
        p->next=ptr;
    }

}
void deleteFromTail(Node** head)
{
    if(*head==NULL)
        printf("\nEmpty list\n");
    else
    {
        Node* p=*head;
        Node* q=0;
        while(p->next)
        {
            q=p;
            p=p->next;
        }
        if(p==*head)
        {
            printf("%d ",p->info);
            free(p);
            *head=NULL;
        }
        else
        {
            q->next=p->next;
            printf("%d ",p->info);
            free(p);
        }
    }
}
void deleteGivenPos(Node** head,int key)
{
    if(*head==NULL)
        printf("\nEmpty list\n");
    else
    {
        Node* q=NULL;
        Node* p=*head;
        while(p && p->info!=key)
        {
            q=p;
            p=p->next;
        }
        if(!p)
            printf("\nElement not found\n");
        else
        {
            printf("%d ",p->info);
            q->next=p->next;
            free(p);
        }
    }
}

void insertAfter(Node** head,int n,int key)
{

    if(*head==NULL)
        printf("\nEmpty list\n");
    else
    {
        Node* p=*head;
        while(p && p->info!=key)
            p=p->next;

        if(!p)
            printf("\nKey not found\n");
        else
        {
            Node* ptr=(Node*)malloc(sizeof(Node));
            ptr=getNode(n);
            ptr->next=p->next;
            p->next=ptr;
        }
    }
}

void insertBefore(Node** head, int n, int key)
{

    if(*head==NULL)
        printf("\nEmpty list\n");
    else
    {
        Node* p = *head;
        Node* q=NULL;
        while(p && p->info!=key)
        {
            q=p;
            p=p->next;
        }
        if(!p)
            printf("\nKey not found\n");
        else if(p==*head)
            addAtHead(head,n);
        else
        {
            Node* ptr=(Node*)malloc(sizeof(Node));
            ptr=getNode(n);
            ptr->next=p;
            q->next=ptr;
        }
    }
}
void printList(Node* head)
{
    if(head==NULL)
        printf("Empty list");
    else
    {
        Node* p=head;
        while(p)
        {
            printf("%d  ",p->info);
            p=p->next;
        }
    }
}
void reverse(Node** head)
{
    if(*head==NULL)
        printf("\nEmpty list\n");
    else
    {
        Node* p = *head;
        Node* q=NULL;
        Node* t=NULL;
        while(p)
        {
            q=p;
            p=p->next;
            q->next=t;
            t=q;
        }
        *head=q;
    }
}

void main()
{
    int i,n,p;
    Node* head=NULL;
    while(1)
    {
        printf("\n Enter 1 to add at tail\n 2 to add at head\n 3 to delete from head\n 4 to delete from tail\n 5 to delete given key\n 6 to insert after a key\n 7 to insert before a key\n 8 to print list\n 9 to reverse\n 10 to exit\n");
        scanf("%d",&i);
        switch(i)
        {
        case 1:
            printf("\nEnter data\n");
            scanf("%d",&n);
            addAtTail(&head,n);
            break;
        case 2:
            printf("\nEnter data\n");
            scanf("%d",&n);
            addAtHead(&head,n);
            break;
        case 3:
            deleteFromHead(&head);
            break;
        case 4:
            deleteFromTail(&head);
            break;
        case 5:
            printf("\nEnter the key\n");
            scanf("%d",&p);
            deleteGivenPos(&head,p);
            break;
        case 6:
            printf("\nEnter the key\n");
            scanf("%d",&p);
            printf("\nEnter data\n");
            scanf("%d",&n);
            insertAfter(&head,n,p);
            break;
        case 7:
            printf("\nEnter the key\n");
            scanf("%d",&p);
            printf("\nEnter data\n");
            scanf("%d",&n);
            insertBefore(&head,n,p);
            break;
        case 8:
            printList(head);
            break;
        case 9:
            reverse(&head);
            break;
        case 10:
            exit(1);
            break;
        default:
            printf("\nWrong Choice\n");




        }

    }


}





